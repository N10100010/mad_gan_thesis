from pathlib import Path
from typing import Type, TypeVar

import numpy as np
from experiment.base_experiments.base_experiment import BaseExperiment
from experiment.base_experiments.base_gan_experiment import BaseGANExperiment
from matplotlib import pyplot as plt
from model_definitions.vanilla_gan.gan import VanillaGAN
from utils.logging import setup_logger

X = TypeVar("X", bound=BaseExperiment)


class GAN_GenerativeCreationExperiment(BaseExperiment):
    experiment_class: Type[X]
    experiment_path: str = None

    latent_point_generator: callable
    n_images: int

    save: bool = True

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        for k, v in kwargs.items():
            setattr(self, k, v)

        self.logger = setup_logger(name=self.name)

    def _setup(self):
        self.experiment: BaseGANExperiment = self.experiment_class.load_from_path(
            Path(self.experiment_path)
        )

    def _load_data(self):
        self.latent_vectors = self.latent_point_generator(
            [self.experiment.batch_size, self.experiment.latent_dim]
        )

    def _initialize_models(self):
        self.experiment.load_model_weights()

        self.gan: VanillaGAN = self.experiment.gan

    def _run(self):
        """
        Generates images using the loaded GAN experiment.

        If a specific generator is chosen, it will generate images using that generator.
        If no specific generator is chosen, it will generate images using all available generators.

        Raises:
            Exception: If MADGAN is not initialized or if the generator index is out of bounds.
            Exception: If the number of latent vectors is less than the number of generators when no specific generator is chosen.

        Sets:
            self.image_data (Dict[int, np.ndarray]): A dictionary where keys are generator indices and values are lists of images generated by that generator.
        """

        if self.gan is None:
            raise Exception("MADGAN is not initialized")

        if self.n_images > self.gan.batch_size:
            # TODO: maybe we should just ensure that the latent vector is not [batch_size, latent_dim] but [n_images, latent_dim]
            raise Exception(
                f"Number of images {self.n_images} is greater than batch size {self.gan.batch_size}"
            )

        image_data = []
        for i in range(self.n_images):
            image_data.append(self.gan.generator(self.latent_vectors))

        self.image_data: np.ndarray = image_data

    def _save_results(self):
        saving_path = Path(self.dir_path, "generated_images")
        saving_path.mkdir(parents=True, exist_ok=True)

        for i, batch in enumerate(self.image_data):
            for j, image in enumerate(batch):
                plt.imshow(image / 127.5 * 127.5, cmap="gray")
                plt.title(f"Image {i}")
                plt.savefig(saving_path / f"image_{i}.png")
                plt.close()
